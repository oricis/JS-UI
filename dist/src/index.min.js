var existObjectKey = function (e, t) { return void 0 !== e[t] }, submitFormTo = function (e, t) { t.action = e, t.submit() }; function getArrayPosition(e, t) { return e.indexOf(t) } function removeArrayMatch(e, t) { t = getArrayPosition(e, t); return 0 <= t && e.splice(t, 1), e } function removeArrayMatches(e, t, r) { if (void 0 !== r && r) return removeArrayMatch(e, t); for (var n = 0; n < e.length;)e[n] === t ? e.splice(n, 1) : n++; return e } function removeDuplicateValues(e) { return [...new Set(e)] } function removeEmptyValues(e) { return e.filter(function (e) { return e && e.length > 0; }) } var getLastSlice = function (e, t) { t = t || "/"; t = e.split(t); return t[t.length - 1] }, getSlice = function (e, t, r) { r = r || "/"; r = e.split(r); return t < 0 && (t = r.length + t), t < r.length ? r[t] : "" }, getSlicesLength = function (e, t) { return t = t || "/", e.split(t).length }, replaceLastSlice = function (e, t, r) { r = r || "/"; e = e.split(r); return e[e.length - 1] = t, e.join(r) }, replaceSlice = function (e, t, r, n) { if (!e || !t || void 0 === r) return console.error("ERR - Something is wrong with the params!"), ""; n = n || "/"; e = e.split(n); return r < 0 && (r = e.length + r), r >= e.length ? (console.error("ERR - Too few parts for position: " + r), "") : (e[r] = t, e.join(n)) }, strhas = function (e, t) { return 0 <= e.indexOf(t) }, strpos = function (e, t) { return e.indexOf(t) }; function reduceWhiteSpaces(e) { for (e = new String(e); e.includes("  ");)e = e.replace("  ", " "); return '' + e } function removeWhiteSpaces(e) { for (e = new String(e); e.includes(" ");)e = e.replace(" ", ""); return '' + e } var $ = function (e) { return 0 === e.indexOf("#") && e.indexOf(" ") < 0 ? document.querySelector(e) : document.querySelectorAll(e) }, removeAttr = function (e, t) { getTargetDomNode(e).removeAttribute(t) }, removeAttrFrom = function (e, t) { e.removeAttribute(t) }, getAttrValue = function (e, t) { t = getTargetDomNode(e).getAttribute(t); return t || "" }, getAttrValueFrom = function (e, t) { t = e.getAttribute(t); return t || "" }, getDataValue = function (e, t) { t = getTargetDomNode(e).dataset[t]; return t || "" }, getDataValueFrom = function (e, t) { t = e.dataset[t]; return t || "" }; function getTargetDomNode(e) { e = $(e); return (Array.isArray(e) || e) && (e = e[0]), e } var addClass = function (e, t, r) { r = r || 0; e = $(e); e && 1 < e.length ? "all" === r ? e.forEach(function (e) { addClassTo(e, t) }) : addClassTo(e[r], t) : null != e[r] ? addClassTo(e[r], t) : addClassTo(e, t) }, addClassTo = function (e, t) { e.classList.add(t) }, addClassToAll = function (e, t) { e && "object" === _typeof(e) ? e.forEach(function (e) { addClassTo(e, t) }) : console.error("addClassToAll() - Err args") }, getClass = function (e, t) { t = t || 0; e = $(e); if (e && 1 < e.length) { if ("all" !== t) return getClassFrom(e[t]); var r = []; return e.forEach(function (e) { r.push(e.className) }), r } return getClassFrom(e[t]) }, getClassFrom = function (e) { return e.className }, hasClass = function (e, t) { return e.classList.contains(t) }, removeClass = function (e, t, r) { r = r || 0; e = $(e); e && 1 < e.length ? "all" === r ? e.forEach(function (e) { removeClassFrom(e, t) }) : removeClassFrom(e[r], t) : null != e[r] ? removeClassFrom(e[r], t) : removeClassFrom(e, t) }, removeClassFrom = function (e, t) { e.classList.remove(t) }, removeClassFromAll = function (e, t) { e && "object" === _typeof(e) ? e.forEach(function (e) { removeClassFrom(e, t) }) : console.error("removeClassFromAll() - Err args") }, toggleClassOf = function (e, t) { e.classList.toggle(t) }, addTextById = function (e, t) { e = getId(e); var r = getText($(e)); setText($(e), r + t) }; function getId(e) { return 0 === e.indexOf("#") ? e : "#" + e } function getText(e) { return e.innerText } var removeText = function (e, t) { t = t || 0; e = $(e); e && 1 < e.length ? "all" === t ? e.forEach(function (e) { e.innerText = "" }) : e[t].innerText = "" : setText(e, "") }, removeTextById = function (e) { e = getId(e), setText($(e), "") }; function setText(e, t) { e.innerText = t } var setTextById = function (e, t) { e = getId(e), setText($(e), t) };
